{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/pig-latin-jared-and-lauralyn/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport butcherPig from './assets/butcherPig.jpeg';\n\nclass App extends Component {\n  constructor(props) {\n    super(props); // the state object holds information that can be displayed to the user and updated throughout the program\n\n    this.myPigLatinCodeHere = () => {\n      // the variable \"userInput\" will contain the text input from the user modified into an array of words\n      // no need to change this variable\n      let userInput = this.state.phrase.split(\" \");\n      console.log(\"userInput:\", userInput); // now that we have an array of words, we can map over the array and access each word\n\n      let translatedWordsArray = userInput.map(currentWord => {\n        // ACTION ITEM: use \"currentWord\" as a starting point for your code\n        console.log(\"currentWord:\", currentWord);\n        let vowelsArray = currentWord.split(\"\").filter(vowel => {\n          return vowel === \"a\" || vowel === \"e\" || vowel === \"i\" || vowel === \"o\" || vowel === \"u\";\n        });\n        console.log(\"vowelsArray:\", vowelsArray); // Must handle:\n        // 1. word starts with a consonant or group of consonants -> move consonants, add \"ay\"\n        //       a. word starts with qu -> move \"qu\", add \"ay\"\n        //       b. no vowels, has y\n        // 2. word starts with a vowel -> add \"way\"\n        // algorithm:\n        // if word starts with consonant\n        //      - handle qu: if first vowel found starts with u, look at the consonant\n        //        before it. is it a q?\n        //        if it's a q, then skip u and split at next letter.\n        //        otherwise, split at first vowel.\n        //      - no vowels, just y in there, then get substring up to y and move to back\n        // if word starts with a vowel, add \"way\"\n\n        let firstLetter = currentWord[0];\n        let translatedWord = \"\"; // word starts with a vowel\n\n        if (firstLetter === \"a\" || firstLetter === \"e\" || firstLetter === \"i\" || firstLetter === \"o\" || firstLetter === \"u\") {\n          translatedWord = currentWord + \"way\";\n        } else {\n          // word starts with consonant(s)\n          let front = \"\";\n          let back = \"\";\n\n          if (vowelsArray.length === 0) {\n            // when y is a vowel\n            // no vowels, pretty sure it has a y\n            let indexOfy = currentWord.indexOf('y');\n            front = currentWord.substring(0, indexOfy);\n            back = \"y\";\n          } else {\n            // word has vowels\n            // word has vowels\n            // word has qu in the first syllable. find the second vowel\n            // is the first vowel u?\n            // u - look to see if there's q in front of the u\n            //      if q, then split at second vowel in vowelsArray\n            //      if not q, then just split at the u\n            // queen, squeal\n            // qu + een, squ + eal\n            // pull -> p + ull\n            // find index of first vowel\n            let indexOfFirstVowel = currentWord.indexOf(vowelsArray[0]);\n\n            if (vowelsArray[0] === 'u') {\n              // vowel is a u. look at the letter before it to see if it's a \"qu\" syllable\n              let letterBeforeU = currentWord.charAt(indexOfFirstVowel - 1);\n\n              if (letterBeforeU === 'q') {// TODO: handle qu\n              } else {\n                // split up the word on the first vowel found. repetitive\n                front = currentWord.substring(0, indexOfFirstVowel);\n                back = currentWord.substring(indexOfFirstVowel);\n              }\n            } else {\n              // split up the word on the first vowel found\n              front = currentWord.substring(0, indexOfFirstVowel);\n              back = currentWord.substring(indexOfFirstVowel);\n            }\n          }\n\n          translatedWord = back + front + \"ay\";\n        }\n\n        console.log(translatedWord); // phrase: \"alpha through yummy squeal queen fry\",\n        // alphayay oughthray ummyyay uealsqay eenquay yfray\n        // Remember: console.log is your friend :)\n        // ACTION ITEM: change the value of currentWord to the name of whatever variable you made containing your Pig Latin'd word\n\n        return currentWord;\n      }); // joining the array back to a string of translated words\n      // no need to change this variable\n\n      let translatedWords = translatedWordsArray.join(\" \");\n      console.log(\"translatedWords:\", translatedWords); // the setState method will take your information from \"translatedWords\" and update the state object that is displayed to the user\n      // no need to change this method\n\n      this.setState({\n        phraseTranslated: translatedWords\n      });\n    };\n\n    this.restartGame = () => {\n      // this method restarts the game by setting the original state\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n      this.setState({\n        phrase: \"alpha through yummy squeal queen fry\",\n        phraseTranslated: \"This is where your translated sentence will appear.\"\n      });\n    };\n\n    this.setUpPreventDefault = e => {\n      // this method prevents React from refreshing the page unnecessarily\n      e.preventDefault();\n      this.myPigLatinCodeHere();\n    };\n\n    this.handleInput = e => {\n      // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n      this.setState({\n        phrase: e.target.value\n      });\n    };\n\n    this.state = {\n      // \"phrase\" is the text entered by the user - right now there are test words hard coded to make the process of testing your code faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: \"alpha through yummy squeal queen fry\",\n      // alphayay oughthray ummyyay uealsqay eenquay yfray\n      // \"phraseTranslated\" is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the \"submit\" button\n      phraseTranslated: \"This is where your translated sentence will appear.\"\n    };\n  } // The \"myPigLatinCodeHere\" function is where you will put your logic to convert the sentence entered by the user to Pig Latin\n\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Pig Latin Translator\"), React.createElement(\"img\", {\n      src: butcherPig,\n      alt: \"pig with butcher cut names in pig latin\",\n      className: \"butcherPig\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"inputArea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Enter phrase to be translated:\"), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"userInput\",\n      onChange: this.handleInput,\n      value: this.state.phrase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.setUpPreventDefault,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"button\", {\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Clear\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, this.state.phraseTranslated), React.createElement(\"footer\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Coded by Jared and Lauralyn\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/pig-latin-jared-and-lauralyn/src/App.js"],"names":["React","Component","butcherPig","App","constructor","props","myPigLatinCodeHere","userInput","state","phrase","split","console","log","translatedWordsArray","map","currentWord","vowelsArray","filter","vowel","firstLetter","translatedWord","front","back","length","indexOfy","indexOf","substring","indexOfFirstVowel","letterBeforeU","charAt","translatedWords","join","setState","phraseTranslated","restartGame","setUpPreventDefault","e","preventDefault","handleInput","target","value","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport butcherPig from './assets/butcherPig.jpeg'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    // the state object holds information that can be displayed to the user and updated throughout the program\n    this.state = {\n      // \"phrase\" is the text entered by the user - right now there are test words hard coded to make the process of testing your code faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: \"alpha through yummy squeal queen fry\",\n      // alphayay oughthray ummyyay uealsqay eenquay yfray\n      // \"phraseTranslated\" is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the \"submit\" button\n      phraseTranslated: \"This is where your translated sentence will appear.\"\n    }\n  }\n\n  // The \"myPigLatinCodeHere\" function is where you will put your logic to convert the sentence entered by the user to Pig Latin\n\n  myPigLatinCodeHere = () => {\n    // the variable \"userInput\" will contain the text input from the user modified into an array of words\n    // no need to change this variable\n    let userInput = this.state.phrase.split(\" \")\n    console.log(\"userInput:\", userInput)\n\n    // now that we have an array of words, we can map over the array and access each word\n    let translatedWordsArray = userInput.map(currentWord => {\n      // ACTION ITEM: use \"currentWord\" as a starting point for your code\n      console.log(\"currentWord:\", currentWord)\n\n      let vowelsArray = currentWord.split(\"\").filter(vowel => {\n        return vowel === \"a\" || vowel === \"e\" || vowel === \"i\" || vowel === \"o\" || vowel === \"u\"\n      })\n      console.log(\"vowelsArray:\", vowelsArray)\n\n      // Must handle:\n      // 1. word starts with a consonant or group of consonants -> move consonants, add \"ay\"\n      //       a. word starts with qu -> move \"qu\", add \"ay\"\n      //       b. no vowels, has y\n      // 2. word starts with a vowel -> add \"way\"\n\n      // algorithm:\n      // if word starts with consonant\n      //      - handle qu: if first vowel found starts with u, look at the consonant\n      //        before it. is it a q?\n      //        if it's a q, then skip u and split at next letter.\n      //        otherwise, split at first vowel.\n      //      - no vowels, just y in there, then get substring up to y and move to back\n      // if word starts with a vowel, add \"way\"\n\n      let firstLetter = currentWord[0]\n      let translatedWord = \"\"\n\n      // word starts with a vowel\n      if (firstLetter === \"a\" || firstLetter === \"e\" || firstLetter === \"i\" ||    firstLetter === \"o\" || firstLetter === \"u\") {\n        translatedWord = currentWord + \"way\"\n      } else {\n        // word starts with consonant(s)\n        let front = \"\"\n        let back = \"\"\n    \n        if (vowelsArray.length === 0) { // when y is a vowel\n            // no vowels, pretty sure it has a y\n            let indexOfy = currentWord.indexOf('y')\n            front = currentWord.substring(0, indexOfy)\n            back = \"y\"\n        } else {  // word has vowels\n            \n            // word has vowels\n\n              // word has qu in the first syllable. find the second vowel\n              // is the first vowel u?\n              // u - look to see if there's q in front of the u\n              //      if q, then split at second vowel in vowelsArray\n              //      if not q, then just split at the u\n              // queen, squeal\n              // qu + een, squ + eal\n              // pull -> p + ull\n\n            // find index of first vowel\n            let indexOfFirstVowel = currentWord.indexOf(vowelsArray[0])\n\n            if (vowelsArray[0] === 'u') {\n                // vowel is a u. look at the letter before it to see if it's a \"qu\" syllable\n                \n                let letterBeforeU = currentWord.charAt(indexOfFirstVowel-1) \n                \n                if (letterBeforeU === 'q') {\n                  // TODO: handle qu\n                } else {\n                    // split up the word on the first vowel found. repetitive\n                    front = currentWord.substring(0, indexOfFirstVowel)\n                    back = currentWord.substring(indexOfFirstVowel)    \n                }\n            } else {            \n                // split up the word on the first vowel found\n                front = currentWord.substring(0, indexOfFirstVowel)\n                back = currentWord.substring(indexOfFirstVowel)\n            }\n\n        }\n        \n        translatedWord = back + front + \"ay\" \n    \n      }\n      console.log(translatedWord)\n\n      // phrase: \"alpha through yummy squeal queen fry\",\n      // alphayay oughthray ummyyay uealsqay eenquay yfray\n\n      // Remember: console.log is your friend :)\n\n      // ACTION ITEM: change the value of currentWord to the name of whatever variable you made containing your Pig Latin'd word\n      return currentWord\n    })\n\n\n    // joining the array back to a string of translated words\n    // no need to change this variable\n    let translatedWords = translatedWordsArray.join(\" \")\n    console.log(\"translatedWords:\", translatedWords)\n\n    // the setState method will take your information from \"translatedWords\" and update the state object that is displayed to the user\n    // no need to change this method\n    this.setState({phraseTranslated: translatedWords})\n  }\n\n  restartGame = () => {\n    // this method restarts the game by setting the original state\n    // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n    this.setState({\n      phrase: \"alpha through yummy squeal queen fry\",\n      phraseTranslated: \"This is where your translated sentence will appear.\"\n    })\n  }\n\n  // no need to modify this method\n  setUpPreventDefault = (e) => {\n    // this method prevents React from refreshing the page unnecessarily\n    e.preventDefault()\n    this.myPigLatinCodeHere()\n  }\n\n  // no need to modify this method\n  handleInput = (e) => {\n    // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n    this.setState({phrase: e.target.value})\n  }\n\n  render(){\n    return(\n      <>\n        <h1>Pig Latin Translator</h1>\n        <img\n          src={butcherPig}\n          alt=\"pig with butcher cut names in pig latin\"\n          className=\"butcherPig\"\n        />\n        <div className=\"inputArea\">\n          <h4>Enter phrase to be translated:</h4>\n          {/* user input field - every DOM event that happens in the input will call the handleChange method and update state */}\n          <input\n            type=\"text\"\n            className=\"userInput\"\n            onChange={this.handleInput}\n            value={this.state.phrase}\n          />\n          <br />\n          {/* button that called the setUpPreventDefault method which calls the myPigLatinCodeHere method */}\n          <button onClick={this.setUpPreventDefault}>Submit</button>\n          <button onClick={this.restartGame}>Clear</button>\n        </div>\n        <p>{this.state.phraseTranslated}</p>\n        <footer>Coded by Jared and Lauralyn</footer>\n      </>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}