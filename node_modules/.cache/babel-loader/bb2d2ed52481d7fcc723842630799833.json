{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/portfolio/pig-latin/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props); // the state object holds information that can be displayed to the user and updated throughout the program\n\n    this.myPigLatinCodeHere = () => {\n      // the variable \"userInput\" will contain the text input from the user modified into an array of words\n      // no need to change this variable\n      let userInput = this.state.phrase.split(\" \");\n      console.log(\"userInput:\", userInput); // now that we have an array of words, we can map over the array and access each word\n\n      let translatedWordsArray = userInput.map(currentWord => {\n        // ACTION ITEM: use \"currentWord\" as a starting point for your code\n        console.log(\"currentWord:\", currentWord);\n        let vowelsArray = currentWord.split(\"\").filter(vowel => {\n          return vowel === \"a\" || vowel === \"e\" || vowel === \"i\" || vowel === \"o\" || vowel === \"u\";\n        });\n        console.log(\"vowelsArray:\", vowelsArray); // Must handle:\n        // 1. word starts with a consonant or group of consonants -> move consonants, add \"ay\"\n        //       a. word starts with qu -> move \"qu\", add \"ay\"\n        //       b. no vowels, has y\n        // 2. word starts with a vowel -> add \"way\"\n        // algorithm:\n        // if word starts with consonant\n        //      - handle qu: if first vowel found starts with u, look at the consonant\n        //        before it. is it a q?\n        //        if it's a q, then skip u and split at next letter.\n        //        otherwise, split at first vowel.\n        //      - no vowels, just y in there, then get substring up to y and move to back\n        // if word starts with a vowel, add \"way\"\n\n        let firstLetter = currentWord[0];\n        let translatedWord = \"\";\n        let front = \"\";\n        let back = \"\"; // word starts with a vowel\n\n        if (firstLetter === \"a\" || firstLetter === \"e\" || firstLetter === \"i\" || firstLetter === \"o\" || firstLetter === \"u\") {\n          return currentWord + \"way\";\n        } else if (vowelsArray.length === 0) {\n          // no vowels, pretty sure it has a y so treat y as the vowel\n          let indexOfy = currentWord.indexOf('y');\n          front = currentWord.substring(0, indexOfy);\n          back = \"y\";\n          translatedWord = back + front + \"ay\";\n        } else {\n          // word is a consonant and has vowels\n          // word has qu in the first syllable. find the second vowel\n          // is the first vowel u?\n          // u - look to see if there's q in front of the u\n          //      if q, then split at second vowel in vowelsArray\n          //      if not q, then just split at the u\n          // queen, squeal\n          // qu + een, squ + eal\n          // pull -> p + ull\n          // find index of first vowel\n          let indexOfFirstVowel = currentWord.indexOf(vowelsArray[0]); // get the first letter before the vowel to see if it's a q\n\n          let letterBeforeVowel = currentWord.charAt(indexOfFirstVowel - 1); // handle qu or other consonant starting word\n\n          if (vowelsArray[0] === 'u' && letterBeforeVowel === 'q') {\n            // vowel is a u. look at the letter before it to see if it's a \"qu\" syllable\n            let indexOfNextVowel = currentWord.indexOf(vowelsArray[1]);\n            front = currentWord.substring(0, indexOfNextVowel);\n            back = currentWord.substring(indexOfNextVowel);\n          } else {\n            // split up the word on the first vowel found\n            front = currentWord.substring(0, indexOfFirstVowel);\n            back = currentWord.substring(indexOfFirstVowel);\n          }\n        }\n\n        translatedWord = back + front + \"ay\"; // ACTION ITEM: change the value of currentWord to the name of whatever variable you made containing your Pig Latin'd word\n\n        return translatedWord;\n      }); // joining the array back to a string of translated words\n      // no need to change this variable\n\n      let translatedWords = translatedWordsArray.join(\" \");\n      console.log(\"translatedWords:\", translatedWords); // the setState method will take your information from \"translatedWords\" and update the state object that is displayed to the user\n      // no need to change this method\n\n      this.setState({\n        phraseTranslated: translatedWords\n      });\n    };\n\n    this.restartGame = () => {\n      // this method restarts the game by setting the original state\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n      this.setState({\n        phrase: \"\",\n        phraseTranslated: \"Pig Latin Translator\"\n      });\n    };\n\n    this.setUpPreventDefault = e => {\n      // this method prevents React from refreshing the page unnecessarily\n      e.preventDefault();\n      this.myPigLatinCodeHere();\n    };\n\n    this.handleInput = e => {\n      // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n      this.setState({\n        phrase: e.target.value\n      });\n    };\n\n    this.state = {\n      // \"phrase\" is the text entered by the user - right now there are test words hard coded to make the process of testing your code faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: \"Translate your sentence into Pig Latin!\",\n      // alphayay oughthray ummyyay uealsqay eenquay yfray\n      // \"phraseTranslated\" is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the \"submit\" button\n      phraseTranslated: \"Pig Latin Translator\"\n    };\n  } // The \"myPigLatinCodeHere\" function is where you will put your logic to convert the sentence entered by the user to Pig Latin\n\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, this.state.phraseTranslated), React.createElement(\"div\", {\n      className: \"inputArea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"userInput\",\n      onChange: this.handleInput,\n      value: this.state.phrase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.setUpPreventDefault,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(\"button\", {\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Clear\"), React.createElement(\"footer\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Coded by Lauralyn and Jared\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/learnacademy/Desktop/portfolio/pig-latin/src/App.js"],"names":["React","Component","App","constructor","props","myPigLatinCodeHere","userInput","state","phrase","split","console","log","translatedWordsArray","map","currentWord","vowelsArray","filter","vowel","firstLetter","translatedWord","front","back","length","indexOfy","indexOf","substring","indexOfFirstVowel","letterBeforeVowel","charAt","indexOfNextVowel","translatedWords","join","setState","phraseTranslated","restartGame","setUpPreventDefault","e","preventDefault","handleInput","target","value","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    // the state object holds information that can be displayed to the user and updated throughout the program\n    this.state = {\n      // \"phrase\" is the text entered by the user - right now there are test words hard coded to make the process of testing your code faster and easier\n      // ACTION ITEM: when you are ready for your full user experience, delete the test words so phrase is assigned an empty string\n      phrase: \"Translate your sentence into Pig Latin!\",\n      // alphayay oughthray ummyyay uealsqay eenquay yfray\n      // \"phraseTranslated\" is what the user will see appear on the page as Pig Latin, it starts as the preset message and updates when your user clicks the \"submit\" button\n      phraseTranslated: \"Pig Latin Translator\"\n    }\n  }\n\n  // The \"myPigLatinCodeHere\" function is where you will put your logic to convert the sentence entered by the user to Pig Latin\n\n  myPigLatinCodeHere = () => {\n    // the variable \"userInput\" will contain the text input from the user modified into an array of words\n    // no need to change this variable\n    let userInput = this.state.phrase.split(\" \")\n    console.log(\"userInput:\", userInput)\n\n    // now that we have an array of words, we can map over the array and access each word\n    let translatedWordsArray = userInput.map(currentWord => {\n      // ACTION ITEM: use \"currentWord\" as a starting point for your code\n      console.log(\"currentWord:\", currentWord)\n\n      let vowelsArray = currentWord.split(\"\").filter(vowel => {\n        return vowel === \"a\" || vowel === \"e\" || vowel === \"i\" || vowel === \"o\" || vowel === \"u\"\n      })\n      console.log(\"vowelsArray:\", vowelsArray)\n\n      // Must handle:\n      // 1. word starts with a consonant or group of consonants -> move consonants, add \"ay\"\n      //       a. word starts with qu -> move \"qu\", add \"ay\"\n      //       b. no vowels, has y\n      // 2. word starts with a vowel -> add \"way\"\n\n      // algorithm:\n      // if word starts with consonant\n      //      - handle qu: if first vowel found starts with u, look at the consonant\n      //        before it. is it a q?\n      //        if it's a q, then skip u and split at next letter.\n      //        otherwise, split at first vowel.\n      //      - no vowels, just y in there, then get substring up to y and move to back\n      // if word starts with a vowel, add \"way\"\n\n      let firstLetter = currentWord[0]\n      let translatedWord = \"\"\n      let front = \"\"\n      let back  = \"\"\n\n      // word starts with a vowel\n      if (firstLetter === \"a\" || firstLetter === \"e\" || firstLetter === \"i\" ||    firstLetter === \"o\" || firstLetter === \"u\") {\n        return currentWord + \"way\"\n      } else if (vowelsArray.length === 0) {\n        // no vowels, pretty sure it has a y so treat y as the vowel\n        let indexOfy = currentWord.indexOf('y')\n        front = currentWord.substring(0, indexOfy)\n        back = \"y\"\n        translatedWord = back + front + \"ay\"\n      } else {\n        // word is a consonant and has vowels\n              // word has qu in the first syllable. find the second vowel\n              // is the first vowel u?\n              // u - look to see if there's q in front of the u\n              //      if q, then split at second vowel in vowelsArray\n              //      if not q, then just split at the u\n              // queen, squeal\n              // qu + een, squ + eal\n              // pull -> p + ull\n\n            // find index of first vowel\n            let indexOfFirstVowel = currentWord.indexOf(vowelsArray[0])\n            // get the first letter before the vowel to see if it's a q\n            let letterBeforeVowel = currentWord.charAt(indexOfFirstVowel-1)\n\n            // handle qu or other consonant starting word\n            if (vowelsArray[0] === 'u' && letterBeforeVowel === 'q') {\n                // vowel is a u. look at the letter before it to see if it's a \"qu\" syllable\n                let indexOfNextVowel = currentWord.indexOf(vowelsArray[1])\n                front = currentWord.substring(0,indexOfNextVowel)\n                back = currentWord.substring(indexOfNextVowel)\n            } else {\n                // split up the word on the first vowel found\n                front = currentWord.substring(0, indexOfFirstVowel)\n                back = currentWord.substring(indexOfFirstVowel)\n            }\n      }\n\n      translatedWord = back + front + \"ay\"\n\n      // ACTION ITEM: change the value of currentWord to the name of whatever variable you made containing your Pig Latin'd word\n      return translatedWord\n    })\n\n    // joining the array back to a string of translated words\n    // no need to change this variable\n    let translatedWords = translatedWordsArray.join(\" \")\n    console.log(\"translatedWords:\", translatedWords)\n\n    // the setState method will take your information from \"translatedWords\" and update the state object that is displayed to the user\n    // no need to change this method\n    this.setState({phraseTranslated: translatedWords})\n  }\n\n  restartGame = () => {\n    // this method restarts the game by setting the original state\n    // ACTION ITEM: when you are ready for your full user experience, delete the test words in phrase so that is assigned an empty string\n    this.setState({\n      phrase: \"\",\n      phraseTranslated: \"Pig Latin Translator\"\n    })\n  }\n\n  // no need to modify this method\n  setUpPreventDefault = (e) => {\n    // this method prevents React from refreshing the page unnecessarily\n    e.preventDefault()\n    this.myPigLatinCodeHere()\n  }\n\n  // no need to modify this method\n  handleInput = (e) => {\n    // this method takes the input and saves the value in this.state.phrase so we can use the input in our program\n    this.setState({phrase: e.target.value})\n  }\n\n  render(){\n    return(\n      <>\n      <h2>{this.state.phraseTranslated}</h2>\n        <div className=\"inputArea\">\n          \n          {/* user input field - every DOM event that happens in the input will call the handleChange method and update state */}\n          <input\n            type=\"text\"\n            className=\"userInput\"\n            onChange={this.handleInput}\n            value={this.state.phrase}\n          />\n          <br />\n          {/* button that called the setUpPreventDefault method which calls the myPigLatinCodeHere method */}\n          <button onClick={this.setUpPreventDefault}>Submit</button>\n          <button onClick={this.restartGame}>Clear</button>\n          \n          <footer>Coded by Lauralyn and Jared</footer>\n        </div>\n        \n      </>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}